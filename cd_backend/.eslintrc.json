{
  "plugins": ["prettier", "unicorn", "import"],
  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
  "parserOptions": {
    "ecmaVersion": 2019, // Allows for the parsing of modern ECMAScript features
    // sourceType: 'module', // Allows for the use of imports
    "project": "./tsconfig.json"
  },
  "extends": [
    "plugin:@typescript-eslint/recommended", // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "prettier",
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and displays prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  "rules": {
    "no-console": "error",
    "@typescript-eslint/ban-types": ["error", { "types": { "Function": false } }],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true,
        "variables": false,
        "allowNamedExports": true
      }
    ],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_", "ignoreRestSiblings": true }],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "modifiers": ["const", "destructured", "global"],
        "format": ["strictCamelCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["exported"],
        "types": ["boolean", "string", "number", "array"],
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "enum",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "function",
        // allow StrictPascalCase for decorators
        "format": ["strictCamelCase", "StrictPascalCase"]
      },
      {
        "selector": ["class", "interface", "typeAlias"],
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"]
      }
    ],
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "ignore",
        "alphabetize": { "order": "ignore" }
      }
    ],
    "unicorn/catch-error-name": ["error", { "name": "err" }],
    "unicorn/filename-case": ["error", { "cases": { "camelCase": true, "pascalCase": true } }]
  },
  "overrides": [
    {
      "files": ["*spec.ts", "*test.ts", "src/spec/**/*"],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["*.spec.ts", "*test.ts"],
      "rules": {
        "no-restricted-properties": [
          "error",
          {
            "object": "test",
            "property": "only",
            "message": "Use \"*.only\" only for local development purposes"
          },
          {
            "object": "suite",
            "property": "only",
            "message": "Use \"*.only\" only for local development purposes"
          },
          {
            "object": "it",
            "property": "only",
            "message": "Use \"*.only\" only for local development purposes"
          },
          {
            "object": "describe",
            "property": "only",
            "message": "Use \"*.only\" only for local development purposes"
          }
        ]
      }
    },
    {
      "files": ["src/db/migrations/*.ts"],
      "rules": {
        "unicorn/filename-case": "off"
      }
    }
  ]
}
