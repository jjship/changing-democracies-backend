name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production_environment
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat >> ~/.ssh/config << EOF
          Host deployment_target
            HostName ${{ secrets.VM_HOST }}
            User ${{ secrets.VM_USER }}
            Port ${{ secrets.VM_SSH_PORT }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config

      - name: Perform Docker cleanup
        run: |
          ssh deployment_target 'bash -s' < scripts/docker-cleanup.sh

      - name: Save current state for rollback
        id: save_state
        run: |
          PREVIOUS_COMMIT=$(ssh deployment_target '
            cd /opt/cd_admin
            if [ -d ".git" ]; then
              git rev-parse HEAD
            fi
          ')

          CONTAINERS=$(ssh deployment_target '
            cd /opt/cd_admin
            docker compose ps --format "{{.Name}}" | tr "\n" " "
          ')

          if [ ! -z "$PREVIOUS_COMMIT" ]; then
            echo "PREVIOUS_COMMIT=$PREVIOUS_COMMIT" >> $GITHUB_ENV
          fi

          if [ -z "$CONTAINERS" ]; then
            echo "ACTIVE_CONTAINERS=none" >> $GITHUB_ENV
          else
            echo "ACTIVE_CONTAINERS=$CONTAINERS" >> $GITHUB_ENV
          fi

      - name: Deploy to VM
        id: deploy
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          ssh deployment_target '
            set -eo pipefail
            
            echo "Starting deployment of commit $GITHUB_SHA..."
            cd /opt/cd_admin
            
            if [ -d ".git" ]; then
              git fetch origin main
              git reset --hard origin/main
            else
              git clone ${{ github.server_url }}/${{ github.repository }} /tmp/cd_admin_temp
              cp -r /tmp/cd_admin_temp/. .
              rm -rf /tmp/cd_admin_temp
            fi
            
            ./scripts/deploy.sh;
          '

      - name: Verify Deployment
        id: verify
        run: |
          sleep 10
          if ! curl -sSf http://${{ secrets.API_URL }}/health; then
            echo "::error::Health check failed"
            exit 1
          fi

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          ssh deployment_target '
            set -eo pipefail
            cd /opt/cd_admin

            echo "Rolling back to commit ${{ env.PREVIOUS_COMMIT }}"
            
            git reset --hard ${{ env.PREVIOUS_COMMIT }}
            
            docker compose -f docker-compose.prod.yml down --volumes=false
            
            if [ "${{ env.ACTIVE_CONTAINERS }}" != "none" ]; then
              echo "Restoring containers: ${{ env.ACTIVE_CONTAINERS }}"
              for container in ${{ env.ACTIVE_CONTAINERS }}; do
                echo "Starting container: $container"
                docker compose up -d "$container"
              done
            else
              echo "No previous state found or no containers were running, starting with default configuration..."
              ./scripts/deploy.sh
            fi
            
            echo "Rollback completed"
          '

      - name: Verify Rollback
        if: failure()
        run: |
          sleep 10
          if ! curl -sSf http://${{ secrets.VM_HOST }}:8083/health; then
            echo "::error::Rollback verification failed"
            exit 1
          fi
          echo "Rollback verified successfully"

      - name: Notify on Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful"
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "Deployment failed and rolled back"
          fi

      - name: Notify on Status
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment failed for commit ${context.sha}\nWorkflow: ${context.workflow}\nSee: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            })
