name: Database Backup

on:
  schedule:
    - cron: '0 0 * * *' # Runs at 1 AM every night
  workflow_dispatch: # Allows manual triggering
  workflow_run:
    workflows: ['Deploy']
    types:
      - completed

jobs:
  backup:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat >> ~/.ssh/config << EOF
          Host deployment_target
            HostName ${{ secrets.VM_HOST }}
            User ${{ secrets.VM_USER }}
            Port ${{ secrets.VM_SSH_PORT }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF

      - name: Create Database Backup
        run: |
          ssh deployment_target '
            set -e  # Exit immediately if a command exits with non-zero status
            
            mkdir -p /opt/cd_admin/backups
            BACKUP_DIR="/opt/cd_admin/backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            # Get the actual container name
            CONTAINER_NAME=$(docker ps --format "{{.Names}}" | grep cd_backend)
            
            if [ -z "$CONTAINER_NAME" ]; then
              echo "Error: cd_backend container not found"
              docker ps
              exit 1
            fi
            
            echo "Found container: $CONTAINER_NAME"
            
            # Create temp directory
            TEMP_DIR=$(mktemp -d)
            
            # Copy the database files and check for errors
            if ! docker cp $CONTAINER_NAME:/cd_backend/data/. "$TEMP_DIR/"; then
              echo "Failed to copy database from container"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            
            # Verify files were copied and not empty
            if [ ! -f "$TEMP_DIR/database.sqlite" ]; then
              echo "Database file not found in copied files"
              ls -la "$TEMP_DIR"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            
            # Create the backup
            tar czf "$BACKUP_DIR/db_backup_$TIMESTAMP.tar.gz" -C "$TEMP_DIR" .
            rm -rf "$TEMP_DIR"
            
            # Verify backup size
            if [ ! -s "$BACKUP_DIR/db_backup_$TIMESTAMP.tar.gz" ]; then
              echo "Error: Backup file is empty"
              rm -f "$BACKUP_DIR/db_backup_$TIMESTAMP.tar.gz"
              exit 1
            fi
            
            BACKUP_SIZE=$(ls -lh "$BACKUP_DIR/db_backup_$TIMESTAMP.tar.gz" | awk "{ print \$5 }")
            echo "Backup created successfully: db_backup_$TIMESTAMP.tar.gz (Size: $BACKUP_SIZE)"
          '

      - name: Cleanup Old Backups
        if: success() # Only run if backup was successful
        run: |
          ssh deployment_target '
            set -e
            BACKUP_DIR="/opt/cd_admin/backups"
            
            # Verify we have valid backups before cleanup
            if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A $BACKUP_DIR)" ]; then
              echo "No backups found to clean up"
              exit 1
            fi
            
            find $BACKUP_DIR -type f -name "db_backup_*.tar.gz" -mtime +30 -delete
            
            cd $BACKUP_DIR
            ls -t db_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm --
            
            echo "Current backups:"
            ls -lh $BACKUP_DIR
          '

      - name: Copy Backup to Runner
        run: |
          LATEST_BACKUP=$(ssh deployment_target '
            cd /opt/cd_admin/backups
            ls -t db_backup_*.tar.gz | head -n 1
          ')

          if [ -z "$LATEST_BACKUP" ]; then
            echo "No backup found"
            exit 1
          fi

          echo "Found latest backup: $LATEST_BACKUP"

          mkdir -p ./backups
          scp "deployment_target:/opt/cd_admin/backups/$LATEST_BACKUP" ./backups/

      - name: Upload Backup to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.sha }}
          path: ./backups/*.tar.gz
          retention-days: 30
          if-no-files-found: error
