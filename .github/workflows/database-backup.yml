name: Database Backup

on:
  schedule:
    - cron: "0 1 * * *" # Runs at 1 AM every night
  workflow_dispatch: # Allows manual triggering
  workflow_run:
    workflows: ["Deploy"]
    types:
      - completed

jobs:
  backup:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat >> ~/.ssh/config << EOF
          Host deployment_target
            HostName ${{ secrets.VM_HOST }}
            User ${{ secrets.VM_USER }}
            Port ${{ secrets.VM_SSH_PORT }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF

      - name: Create Database Backup
        run: |
          ssh deployment_target '
            mkdir -p /opt/cd_admin/backups
            BACKUP_DIR="/opt/cd_admin/backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            
            docker run --rm \
              -v cd_admin-db_data:/data \
              -v $BACKUP_DIR:/backup \
              alpine tar czf /backup/db_backup_$TIMESTAMP.tar.gz -C /data .
            
            if [ ! -f "$BACKUP_DIR/db_backup_$TIMESTAMP.tar.gz" ]; then
              echo "Backup failed to create"
              exit 1
            fi
            
            echo "Backup created successfully: db_backup_$TIMESTAMP.tar.gz"
          '

      - name: Cleanup Old Backups
        run: |
          ssh deployment_target '
            BACKUP_DIR="/opt/cd_admin/backups"
            
            find $BACKUP_DIR -type f -name "db_backup_*.tar.gz" -mtime +30 -delete
            
            cd $BACKUP_DIR
            ls -t db_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs -r rm --
            
            echo "Current backups:"
            ls -lh $BACKUP_DIR
          '

      - name: Prepare Backup Directory
        run: mkdir -p ./backups

      - name: Copy Backup to Runner
        run: |
          ssh deployment_target '
            cd /opt/cd_admin/backups
            LATEST_BACKUP=$(ls -t db_backup_*.tar.gz | head -n 1)
            if [ -n "$LATEST_BACKUP" ]; then
              echo "Found latest backup: $LATEST_BACKUP"
            else
              echo "No backup found"
              exit 1
            fi
          '

          scp deployment_target:/opt/cd_admin/backups/$(ssh deployment_target 'ls -t /opt/cd_admin/backups/db_backup_*.tar.gz | head -n 1') ./backups/

      - name: Upload Backup to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.sha }}
          path: ./backups/*.tar.gz
          retention-days: 30
          if-no-files-found: error
